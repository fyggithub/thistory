#include "stateReset.h"

/********************************************************************
 *
 *******************************************************************/
STATIC VOID ExitOptState(Message* msg)
{
	STATIC UINT8 ResetCount[4] = {0};
	switch(msg->id)   		//最终清理状态
	{
		case MSG_X_DONE:	ResetCount[0] = 1 ;	break;
		case MSG_Y_DONE:	ResetCount[1] = 1 ;	break;
		case MSG_Z_DONE:	ResetCount[2] = 1 ;	break;
		case MSG_SYN_DONE:	ResetCount[3] = 1 ;	break;														
		default:break;
	}
	SampleStateEndHandler();
	
	if( !(ResetCount[0] && ResetCount[1] && ResetCount[2] && ResetCount[3]) )
		MainState.stateManageTop = STATE0_INIT;
}
/********************************************************************
 *
 *******************************************************************/
STATIC INT32 PlusePositiveDir(Message* msg,INT32 mvpluse,INT32 dir)
{
	switch(msg->id)   		//最终清理状态
	{
		case MSG_X_DONE:{
					if(dir == MOTOR_X_POSITIVE_DIRECTION)
						mvpluse = (-1)*mvpluse;
				}break;			
		case MSG_Y_DONE:{	
					if(dir == MOTOR_Y_POSITIVE_DIRECTION)
						mvpluse = (-1)*mvpluse;	
				}break;			
		case MSG_Z_DONE:{	
					if(dir == MOTOR_Z_POSITIVE_DIRECTION)
						mvpluse = (-1)*mvpluse;
				}break;				
		case MSG_SYN_DONE:{	
					if(dir == MOTOR_SYN_POSITIVE_DIRECTION)
						mvpluse = (-1)*mvpluse;	
				}break;		
		default:break;
	}
	return (mvpluse);
}
/********************************************************************
 *Enter and leave and reenter
 *******************************************************************/
STATIC VOID SampleResetNoOptProcessHandle2(Message* msg, StepMotor* motor, INT32 step, UINT32 speed)
{
		INT32 outoptpluse = 0;
		switch(MainState.stateManageBtm)
		{
			case STATE2_OPT_NOOPT_INIT:{
								switch(msg->id)   		//离开光耦
								{
									case MSG_X_DONE:
									case MSG_Y_DONE:
									case MSG_Z_DONE:
									case MSG_SYN_DONE:
												if(GetInitOptDistance(motor) >= 3200)   //if moro then 3200,direct stop
												{
													if(msg->id == MSG_Z_DONE){
														INT32 step = ConfigGet(CFG_SAMPLE_POS_VRST);
														StepMotorMovAbs(&(MainState.motors[MOTOR_Z]), step, 3);
														MainState.stateManageBtm = STATE2_OPT_NOOPT_MAX;
													}
													else{
														ExitOptState(msg);								
														MainState.stateManageMid = STATE1_OPT_MAX;																																		
														MainState.stateManageBtm = STATE2_OPT_NOOPT_MAX;
													}
												}else{
													if(MainState.Parameter.motor == 2)
														outoptpluse = PlusePositiveDir(msg,1600,1);
													else
														outoptpluse = PlusePositiveDir(msg,3200,1);												
													StepMotorMovRel (motor, outoptpluse, speed);
													MainState.stateManageBtm = STATE2_OPT_NOOPT_LEAVE;
												}													
												break;
									default:break;
								}
							}break;
			case STATE2_OPT_NOOPT_LEAVE:{
								switch(msg->id)   		//再次进入光耦
								{
									case MSG_X_DONE:
									case MSG_Y_DONE:
									case MSG_Z_DONE:
									case MSG_SYN_DONE:												
												StepMotorMovUntilOpto(motor,step,speed);																																			
												MainState.stateManageBtm = STATE2_OPT_NOOPT_AGENT;
												break;
									default:break;
								}
							}break;
			case STATE2_OPT_NOOPT_AGENT:{
								if(msg->id == MSG_Z_DONE){
									INT32 step = ConfigGet(CFG_SAMPLE_POS_VRST);
									StepMotorMovAbs(&(MainState.motors[MOTOR_Z]), step, 3);
									MainState.stateManageBtm = STATE2_OPT_NOOPT_MAX;
								}
								else{
									ExitOptState(msg);								
									MainState.stateManageMid = STATE1_OPT_MAX;																																		
									MainState.stateManageBtm = STATE2_OPT_NOOPT_MAX;
								}
																							
							}break;
			case STATE2_OPT_NOOPT_MAX:{
								ExitOptState(msg);								
								MainState.stateManageMid = STATE1_OPT_MAX;																																		
								MainState.stateManageBtm = STATE2_OPT_NOOPT_MAX;
							}break;
			default:break;
		}
}
/********************************************************************
 *Leave after entering
 *******************************************************************/
STATIC VOID SampleResetOptProcessHandle(Message* msg,StepMotor* motor, INT32 step, UINT32 speed)
{	
		switch(MainState.stateManageBtm)
		{
			case STATE2_OPT_OPT_INIT:  break;       				//not add break
			case STATE2_OPT_OPT_LEAVE:{
										switch(msg->id)   		//防止其他消息进入，再次进入光耦
										{
											case MSG_X_DONE:
											case MSG_Y_DONE:
											case MSG_Z_DONE:
											case MSG_SYN_DONE:												
														StepMotorMovUntilOpto(motor, step,speed);																	
														MainState.stateManageBtm = STATE2_OPT_OPT_AGENT;
														break;
											default:break;
										}
								}break;
			case STATE2_OPT_OPT_AGENT:{
									if(msg->id == MSG_Z_DONE){
										INT32 step = ConfigGet(CFG_SAMPLE_POS_VRST);
										StepMotorMovAbs(&(MainState.motors[MOTOR_Z]), step, 3);
										MainState.stateManageBtm = STATE2_OPT_OPT_MAX;
									}
									else{
										ExitOptState(msg);									
										MainState.stateManageMid = STATE1_OPT_MAX;
										MainState.stateManageBtm = STATE2_OPT_OPT_MAX;
									}																
								}break;												
			case STATE2_OPT_OPT_MAX:{
									ExitOptState(msg);									
									MainState.stateManageMid = STATE1_OPT_MAX;
									MainState.stateManageBtm = STATE2_OPT_OPT_MAX;
								}break;
			default:break;
		}
}

/********************************************************************
 *电机复位
 *******************************************************************/
VOID SampleStateMotorResetMessageHandler(Message* msg)
{
	INT32 outoptpluse = 0;
	INT16 max_distance[5] = {30000,-30000,12000,32000};
	
	switch(MainState.stateManageMid)
	{
		case STATE1_OPT_INIT:{
							MainState.Parameter.motor = msg->p1 - 1;				
							MainState.Parameter.speed = msg->p2; 							
							if(GpioGet(MainState.motors[MainState.Parameter.motor].opto)){   //光耦未遮挡状态							
								StepMotorMovUntilOpto(&(MainState.motors[MainState.Parameter.motor]), \
														max_distance[MainState.Parameter.motor], MainState.Parameter.speed);
								MainState.stateManageMid = STATE1_NOOPT;
								MainState.stateManageBtm = STATE2_OPT_NOOPT_INIT;							
							}							
							else{    								   //光耦遮挡状态																		
								switch(MainState.Parameter.motor)
								{
									case MOTOR_X:outoptpluse = DirSortOut(MainState.Parameter.motor,4800,1);break;
									case MOTOR_Y:outoptpluse = DirSortOut(MainState.Parameter.motor,6400,1);break;
									case MOTOR_Z:outoptpluse = DirSortOut(MainState.Parameter.motor,1600,1);break;
									case MOTOR_SYN:outoptpluse = DirSortOut(MainState.Parameter.motor,6400,1);break;
									default:break;
								}
								StepMotorMovRel (&(MainState.motors[MainState.Parameter.motor]), outoptpluse, MainState.Parameter.speed);
								MainState.stateManageMid = STATE1_OPT;
								MainState.stateManageBtm = STATE2_OPT_OPT_LEAVE;
							}
						}break;
		case STATE1_OPT:	SampleResetOptProcessHandle(msg, &(MainState.motors[MainState.Parameter.motor]),\
														max_distance[MainState.Parameter.motor],MainState.Parameter.speed);		
							break;					
		case STATE1_NOOPT:	SampleResetNoOptProcessHandle2(msg, &(MainState.motors[MainState.Parameter.motor]),\
															max_distance[MainState.Parameter.motor], MainState.Parameter.speed);	
							break;																				
		case STATE1_OPT_MAX:break;
		default:break;
	}
}






